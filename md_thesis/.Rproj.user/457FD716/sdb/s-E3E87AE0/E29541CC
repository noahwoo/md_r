{
    "collab_server" : "",
    "contents" : "require(xlsx)\nhn_raw <- read.xlsx(\"/Users/wujianmin/Documents/personal/lp/0916-HN/HN0917_V5_1125.xlsx\", \n                    sheetName = \"HN2-retest2\")\nnames(hn_raw)\n\nhn_raw$pathscore_t[hn_raw$pathscore_t==2] <- 1\nt.test(age ~ pathscore_t, hn_raw)\nt.test(T_stage ~ pathscore_t, hn_raw)\n\n# cleaning stuff\ncols <- c(\"pathscore\", \"ADCav\", \"KtransAv\", \"SUVav\", \n          \"ADCmin\", \"SUVmax\", \"VeAv\", \"KepAv\", \"IAUGCAv\")\ncols2 <- c(\"pathscore\", \"ADCmean\", \"Ktrans_mean\", \"SUVmean\", \n          \"ADCmin\", \"SUVmax\", \"Ve_mean\", \"Kep_mean\", \"IAUGCmean\")\nhn_c <- hn_raw[, cols] # project column\n\n# \"SUVmean\", \"SUVmax\", \"ADCmean\"\nlibrary(nortest)\nshapiro.test(hn_c$SUVav)\nad.test(hn_c$SUVav)\nqqnorm(hn_c$SUVav)\nks.test(hn_c$SUVav, rnorm(23))\n\nshapiro.test(hn_c$SUVmax)\nad.test(hn_c$SUVmax)\nqqnorm(hn_c$SUVmax)\nks.test(hn_c$SUVmax, rnorm(23))\n\nshapiro.test(hn_c$ADCav)\nad.test(hn_c$ADCav)\nqqnorm(hn_c$ADCav)\nks.test(hn_c$ADCav, rnorm(23))\n\n# factorize target variables\nhn_c$pathscore <- as.factor(hn_c$pathscore)\n\n# clear problematic case\n# hn_c <- hn_c[-13, ] # remove Wang Zhengyang\n# hn_c <- hn_c[-19, ] # remove Xiang Xiaoyi\n# hn_c <- hn_c[-23, ] # remove An Zhanzu\n# hn_c <- hn_c[c(1:8, 10:12, 14, 16:18, 20:22, 24), ] # remove ALL\nhn_c <- hn_c[c(1:12, 14:18, 20:22, 24), ] # remove ALL\n\n\n# mark the current state of processing\nhn <- hn_c\nsummary(hn)\n# visual check data distribution\nattach(hn)\npar(mfrow=c(2,1))\nplot(SUVav, ADCav, col=c(\"red\", \"green\", \"blue\")[pathscore], main=\"SUVav vs. ADCav\")\ntext(SUVav, ADCav, labels = row.names(hn), cex = 0.8)\n\nplot(KtransAv, ADCav, col=c(\"red\", \"green\", \"blue\")[pathscore], main=\"KtransAv vs. ADCav\")\ntext(KtransAv, ADCav, labels = row.names(hn), cex = 0.8)\ndetach(hn)\n\n# chisq test for t-stage and XSSC\nM <- as.table(rbind(c(3,2,4), c(1,5,8)))\ndimnames(M) <- list(ssc=c(\"W\", \"P\"), ts=c(\"t2\", \"t3\", \"t4\"))\nM\nchisq.test(M)\n\nM <- as.table(rbind(c(6,4), c(9,14)))\nchisq.test(M)\n\nM <- as.table(rbind(c(1,4), c(9,14)))\nchisq.test(M)\n\nM <- as.table(rbind(c(1,2), c(9,14)))\nchisq.test(M)\n\nM <- as.table(rbind(c(0,3), c(9,14)))\nchisq.test(M)\n\nM <- as.table(rbind(c(1,0), c(9,14)))\nchisq.test(M)\n\nM <- as.table(rbind(c(0,1), c(9,14)))\nchisq.test(M)\n\n# purify the columns and rows\nhn_p <- hn[, cols]\n# some stats here\nhn_d <- hn_p[!is.na(hn_p$ADCav), ]\nmean(hn_d[hn_d$pathscore==1, ]$ADCav)\nmean(hn_d[hn_d$pathscore==2, ]$ADCav)\n\nhn_d <- hn_p[!is.na(hn_p$SUVmax), ]\nmean(hn_d[hn_d$pathscore==1, ]$SUVmax)\nmean(hn_d[hn_d$pathscore==2, ]$SUVmax)\n\nhn_d <- hn_p[!is.na(hn_p$SUVav), ]\nmean(hn_d[hn_d$pathscore==1, ]$SUVav)\nmean(hn_d[hn_d$pathscore==2, ]$SUVav)\n\nhn_d <- hn_p[!is.na(hn_p$KtransAv), ]\nmean(hn_d[hn_d$pathscore==1, ]$KtransAv)\nmean(hn_d[hn_d$pathscore==2, ]$KtransAv)\n\nhn_d <- hn_p[!is.na(hn_p$KepAv), ]\nmean(hn_d[hn_d$pathscore==1, ]$KepAv)\nmean(hn_d[hn_d$pathscore==2, ]$KepAv)\n\nhn_d <- hn_p[!is.na(hn_p$VeAv), ]\nmean(hn_d[hn_d$pathscore==1, ]$VeAv)\nmean(hn_d[hn_d$pathscore==2, ]$VeAv)\n\nhn_d <- hn_p[!is.na(hn_p$IAUGCAv), ]\nmean(hn_d[hn_d$pathscore==1, ]$IAUGCAv)\nmean(hn_d[hn_d$pathscore==2, ]$IAUGCAv)\n\n# do anova test here\n# hn_p <- hn_p[hn_p$pathscore != 2, ]\nt.test(SUVav ~ pathscore, data=hn_p)\n# fit <- aov(SUVav ~ pathscore, data=hn_p) # OK\n# summary(fit)\n# kruskal.test(SUVav ~ pathscore, data = hn_p)\nwilcox.test(SUVav ~ pathscore, data=hn_p, paired = FALSE)\n\nt.test(SUVmax ~ pathscore, data=hn_p)\n# fit <- aov(SUVmax ~ pathscore, data=hn_p) # OK\n# summary(fit)\n# kruskal.test(SUVmax ~ pathscore, data = hn_p)\nwilcox.test(SUVmax ~ pathscore, data=hn_p)\n\nt.test(ADCav ~ pathscore, data=hn_p)\n# fit <- aov(ADCav ~ pathscore, data=hn_p) # OK\n# summary(fit)\n# kruskal.test(ADCav ~ pathscore, data = hn_p)\nwilcox.test(ADCav ~ pathscore, data=hn_p)\n\n\n\nt.test(KtransAv ~ pathscore, data=hn_p)\n# fit <- aov(KtransAv ~ pathscore, data=hn_p) # OK\n# summary(fit)\n# kruskal.test(KtransAv ~ pathscore, data = hn_p)\n \nt.test(VeAv ~ pathscore, data=hn_p)\n# fit <- aov(VeAv ~ pathscore, data=hn_p) # OK\n# summary(fit)\n# kruskal.test(VeAv ~ pathscore, data = hn_p)\n\nt.test(KepAv ~ pathscore, data=hn_p)\n# fit <- aov(KepAv ~ pathscore, data=hn_p) # OK\n# summary(fit)\n# kruskal.test(KepAv ~ pathscore, data = hn_p)\n\nt.test(IAUGCAv ~ pathscore, data=hn_p)\n# fit <- aov(IAUGCAv ~ pathscore, data=hn_p) # OK\n# summary(fit)\n# kruskal.test(IAUGCAv ~ pathscore, data = hn_p)\n\n# box-plot\n\n# box-plot with ggplot\nlibrary(reshape2)\nlibrary(ggplot2)\nhn_c <- hn_p\nnames(hn_c) <- cols2\n# hn_c$pathscore <- c(\"高分化\", \"中低分化\")[hn_c$pathscore] \nhn_c$pathscore <- c(\"WSCC\", \"M-PSCC\")[hn_c$pathscore]\nhn.m <- melt(hn_c, id.vars='pathscore', \n             measure.vars=c('SUVmean','ADCmean', 'SUVmax'))\n# ggplot(hn.m) +\n#   geom_boxplot(aes(x=pathscore, y=value, color=variable))\np <- ggplot(data = hn.m, aes(x=variable, y=value)) + \n  geom_boxplot(aes(fill=pathscore))\np <- p + facet_wrap( ~ variable, scales=\"free\")\np <- p + scale_fill_manual(\n  values = c(\"blue\", \"red\"),\n  name = \"分化程度 Differentiation\",\n  labels = c(\"高分化 Well differentiation\", \"中低分化 Moderately-poorly differentiation\")) \np <- p + theme(text = element_text(family = 'SimSun'))\n\n# p <- p + ggtitle(\"Boxplot of Pathological Score\")\np\n# remove some rows\nhn_p <- hn_p[!is.na(hn_p$ADCav), ]\n# hn_p <- hn_p[!is.na(hn_p$KepAv), ]\n\nsummary(hn_p)\n\n# correlation check\ncor(hn_p[, cols[c(-1, -9, -5)]], method=c(\"pearson\"))\ncor(hn_p[, cols[c(-1, -9, -5)]], method=c(\"spearman\"))\n\ncor.test( ~ ADCav + SUVav, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ ADCav + SUVmax, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ ADCav + KtransAv, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ ADCav + VeAv, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ ADCav + KepAv, data = hn_p, method = c(\"spearm\"))\n\ncor.test( ~ SUVav + SUVmax, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ SUVav + KtransAv, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ SUVav + VeAv, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ SUVav + KepAv, data = hn_p, method = c(\"spearm\"))\n\ncor.test( ~ SUVmax + KtransAv, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ SUVmax + VeAv, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ SUVmax + KepAv, data = hn_p, method = c(\"spearm\"))\n\ncor.test( ~ KtransAv + VeAv, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ KtransAv + KepAv, data = hn_p, method = c(\"spearm\"))\n\ncor.test( ~ VeAv + KepAv, data = hn_p, method = c(\"spearm\"))\n\n# sig. test\nt.test(SUVav ~ pathscore, data=hn_p)\nwilcox.test(SUVav ~ pathscore, data=hn_p)\n\nt.test(ADCmin ~ pathscore, data=hn_p)\nwilcox.test(ADCmin ~ pathscore, data=hn_p)\n\nt.test(ADCav ~ pathscore, data=hn_p)\nwilcox.test(ADCav ~ pathscore, data=hn_p)\n\nt.test(KtransAv ~ pathscore, data=hn_p)\nwilcox.test(KtransAv ~ pathscore, data=hn_p)\n\nt.test(VeAv ~ pathscore, data=hn_p)\nwilcox.test(VeAv ~ pathscore, data=hn_p)\n\nt.test(KepAv ~ pathscore, data=hn_p)\nwilcox.test(KepAv ~ pathscore, data=hn_p)\n\nt.test(IAUGCAv ~ pathscore, data=hn_p)\nwilcox.test(IAUGCAv ~ pathscore, data=hn_p)\n\n# evaluate on train\n# auc\nauc <- performance(prediction(-hn_p$KepAv, hn_p$pathscore),\"auc\")\nauc\nauc <- performance(prediction(-hn_p$SUVav, hn_p$pathscore),\"auc\")\nauc\nauc <- performance(prediction(hn_p$ADCav, hn_p$pathscore),\"auc\")\nauc\n\n# LR\nfit1 <- glm(pathscore ~ SUVav, family=binomial(link = \"logit\"), hn_p)\npred1 <- predict(fit1, newdata = hn_p, type=c(\"response\"))\n\nrequire(ROCR)\nlibrary(pROC)\npar(mfrow=c(1,1))\n\nplot(roc(hn_p$pathscore, pred1, direction=\"<\", smooth = FALSE),\n     col=\"blue\", lwd=2, main=\"\", tck = 0.02,\n     xaxs = \"i\", yaxs=\"i\", \n     xlim = c(1, 0), ylim = c(0,1), \n     xlab = \"1-特异度(1-Specifity)\", ylab = \"敏感度(Sensitivity)\",\n     family='STKaiti', legacy.axes = TRUE)\n\nauc  <- performance(prediction(pred1, hn_p$pathscore), \"auc\")\nauc@y.values[[1]]\n\nfit2 <- glm(pathscore ~ ADCav, family=binomial(link = \"logit\"), hn_p)\npred2 <- predict(fit2, newdata = hn_p, type=c(\"response\"))\n\nlines(roc(hn_p$pathscore, pred2, direction=\"<\", smooth = FALSE),\n     col=\"red\", lwd=2)\nauc  <- performance(prediction(pred2, hn_p$pathscore), \"auc\")\nauc@y.values[[1]]\n\nfit3 <- glm(pathscore ~ ADCav + SUVav, family=binomial(link = \"logit\"), hn_p)\npred3 <- predict(fit3, newdata = hn_p, type=c(\"response\"))\n\nlines(roc(hn_p$pathscore, pred3, direction=\"<\", smooth = FALSE),\n      col=\"purple\", lwd=2)\nauc  <- performance(prediction(pred3, hn_p$pathscore), \"auc\")\nauc@y.values[[1]]\n\nlegend(\"bottomright\", expression(\"SUVmean\", \"ADCmean\",\"Combination\"), \n       lty = 1, bty = \"n\", col=c(\"blue\", \"red\", \"purple\"))\n\n# evaluate with cross validation(LOO)\nhn_tp <- hn_p[!is.na(hn_p$KepAv), ]\n\nmean(hn_p[hn_p$pathscore==1, \"ADCav\"])\nmean(hn_p[hn_p$pathscore==1, \"SUVmax\"])\nmean(hn_p[hn_p$pathscore==1, \"SUVav\"])\n\nsd(hn_p[hn_p$pathscore==1, \"ADCav\"])\nsd(hn_p[hn_p$pathscore==1, \"SUVmax\"])\nsd(hn_p[hn_p$pathscore==1, \"SUVav\"])\n\nmean(hn_p[hn_p$pathscore==2, \"ADCav\"])\nmean(hn_p[hn_p$pathscore==2, \"SUVmax\"])\nmean(hn_p[hn_p$pathscore==2, \"SUVav\"])\n\nsd(hn_p[hn_p$pathscore==2, \"ADCav\"])\nsd(hn_p[hn_p$pathscore==2, \"SUVmax\"])\nsd(hn_p[hn_p$pathscore==2, \"SUVav\"])\n\n\nhn_fi <- hn_p[is.na(hn_p$KepAv), ]\nhn_fi[8, \"ADCav\"] <- 1.3 \n\nattach(hn_fi)\npar(mfrow=c(1,1))\nplot(SUVav, ADCav, col=c(\"red\", \"green\", \"blue\")[pathscore], main=\"SUVav vs. ADCav\")\ntext(SUVav, ADCav, labels = row.names(hn_fi), cex = 0.8)\ndetach(hn_fi)\n\nhn_fp <- rbind(hn_tp, hn_fi[c(1,2,3,4,5,6,8,9), ])\n\nntrain_t <- dim(hn_tp)[1]\nntrain_f <- dim(hn_fp)[1]\n\ngpred1 <- (1:ntrain_t)\ngpred2 <- (1:ntrain_t)\ngpred3 <- (1:ntrain_f)\ngpred4 <- (1:ntrain_f)\ngpred5 <- (1:ntrain_f)\n\nlibrary(\"rpart\")\nlibrary(\"rpart.plot\")\nhn_u <- hn_fp\nntrain <- dim(hn_u)[1]\n\nfor(k in 1:ntrain) {\n  hn_trn <- hn_u[-k, ]\n  hn_tst <- hn_u[k, ]\n  fit1 <- glm(pathscore ~ SUVav, family=binomial(link = \"logit\"), hn_trn)\n  fit2 <- glm(pathscore ~ ADCav, family=binomial(link = \"logit\"), hn_trn)\n  fit3 <- glm(pathscore ~ SUVmax, family=binomial(link = \"logit\"), hn_trn)\n  fit4 <- glm(pathscore ~ SUVav + ADCav, family=binomial(link = \"logit\"), hn_trn)\n  fit5 <- glm(pathscore ~ SUVav + ADCav + SUVmax, family=binomial(link = \"logit\"), hn_trn)\n  # fit5 <- rpart(pathscore ~ SUVav + ADCav + KepAv, data=hn_trn, method=\"anova\", \n  #             control=rpart.control(minsplit=2, cp=0.001))\n  if (ntrain == ntrain_t) {\n    pred <- predict(fit1, newdata = hn_tst, type=c(\"response\"))\n    gpred1[k] <- pred[1]\n    pred <- predict(fit2, newdata = hn_tst, type=c(\"response\"))\n    gpred2[k] <- pred[1]\n    pred <- predict(fit3, newdata = hn_tst, type=c(\"response\"))\n    gpred3[k] <- pred[1]\n  }\n\n  if (ntrain == ntrain_f) {\n    pred <- predict(fit4, newdata = hn_tst, type=c(\"response\"))\n    gpred4[k] <- pred[1]\n    # pred <- predict(fit5, hn_tst)\n    # pred <- predict(fit5, newdata = hn_tst, type=c(\"response\"))\n    # gpred5[k] <- pred[1]\n  }\n}\n\nfit_ff <- glm(pathscore ~ SUVav + ADCav, family=binomial(link = \"logit\"), hn_fp)\nsummary(fit_ff)\n\nlibrary(car)\n# we evaluate it here\nrequire(ROCR)\nlibrary(pROC)\npar(mfrow=c(1,1))\n\n# roc plot\n# perf <- performance(prediction(gpred, hn_p$pathscore), \"tpr\", \"fpr\")\n# plot(perf, avg=\"threshold\")\n# suv\nplot(roc(hn_tp$pathscore, gpred1, direction=\"<\", smooth = FALSE),\n     col=\"blue\", lwd=2, main=\"SUV、ADC及组合的ROC\", family='STKaiti')\nauc  <- performance(prediction(gpred1, hn_tp$pathscore), \"auc\")\nauc@y.values[[1]]\n# sens/spec\nperf <- performance(prediction(gpred1, hn_tp$pathscore), \"sens\", \"spec\")\nperf\nix <- which.max(perf@x.values[[1]] + perf@y.values[[1]])\nsens <- perf@y.values[[1]][ix] \nspec <- perf@x.values[[1]][ix]\nc(ix=ix, sens=sens, spec=spec)\nauc <- performance(prediction(gpred1, hn_tp$pathscore), \"ppv\", \"npv\")\nauc\n\n# adc\nlines(roc(hn_tp$pathscore, gpred2, direction=\"<\", smooth = FALSE),\n     col=\"black\", lwd=2)\nauc  <- performance(prediction(gpred2, hn_tp$pathscore), \"auc\")\nauc@y.values[[1]]\n# sens/spec\nperf <- performance(prediction(gpred2, hn_tp$pathscore), \"sens\", \"spec\")\nperf\nix <- which.max(perf@x.values[[1]] + perf@y.values[[1]])\nsens <- perf@y.values[[1]][ix] \nspec <- perf@x.values[[1]][ix]\nc(ix=ix, sens=sens, spec=spec)\nauc <- performance(prediction(gpred2, hn_tp$pathscore), \"ppv\", \"npv\")\nauc\n\n# suvmax\nlines(roc(hn_tp$pathscore, gpred3, direction=\"<\", smooth = FALSE),\n      col=\"black\", lwd=2)\nauc  <- performance(prediction(gpred3, hn_tp$pathscore), \"auc\")\nauc@y.values[[1]]\n\n\n# combined\nlines(roc(hn_fp$pathscore, gpred4, direction=\"<\", smooth = FALSE),\n      col=\"red\", lwd=2)\nauc  <- performance(prediction(gpred4, hn_fp$pathscore), \"auc\")\nauc@y.values[[1]]\n\nlegend(\"bottomright\", expression(\"SUVmean\", \"SUVmax\", \"ADCmean\",\"Combination\"), \n       lty = 1, col=c(\"blue\", \"red\", \"black\", \"purple\"))\n\nperf <- performance(prediction(gpred4, hn_fp$pathscore), \"sens\", \"spec\")\nperfv <- perf@x.values[[1]] + perf@y.values[[1]]\nix <- which.max(perfv)\nsens <- perf@y.values[[1]][ix] \nspec <- perf@x.values[[1]][ix]\nc(ix=ix, sens=sens, spec=spec, cutoff=perfv[ix])\n\nauc <- performance(prediction(gpred4, hn_fp$pathscore), \"ppv\", \"npv\")\nauc\nc(npv=auc@x.values[[1]][ix], ppv=auc@y.values[[1]][ix])\n\n\nr0 <- roc(hn_fp$pathscore, rep(0, ntrain))\nr1 <- roc(hn_fp$pathscore, gpred4, direction=\"<\", smooth = FALSE)\nroc.test(r0, r1) # significant test\nci.auc(r1, method = c(\"bootstrap\"))\n\n##############################\nr0 <- roc(hn_p$pathscore, rep(0, ntrain)) \n# combine\nr1 <- roc(hn_p$pathscore, gpred5, direction=\"<\", smooth = FALSE)\nroc.test(r0, r1) # significant test\nci.auc(r1, method = c(\"bootstrap\"))\n\n# suv_av\nr2 <- roc(hn_p$pathscore, gpred1, direction=\"<\", smooth = FALSE)\nroc.test(r0, r2) # significant test\nci.auc(r2)\n\n# adc_av\nr3 <- roc(hn_p$pathscore, gpred2, direction=\"<\", smooth = FALSE)\nroc.test(r0, r3) # significant test\nci.auc(r3)\n\n# suv_max\nr4 <- roc(hn_p$pathscore, gpred3, direction=\">\", smooth = FALSE)\nroc.test(r0, r4) # significant test\nci.auc(r4)\n\n# ---------\nroc.test(r1, r2) # suv_av\nroc.test(r1, r3) # adc_av\nroc.test(r1, r4) # suv_max\nroc.test(r2, r3)\n\n# sens/spec\nperf <- performance(prediction(gpred3, hn_p$pathscore), \"sens\", \"spec\")\nperf\nix <- which.max(perf@x.values[[1]] + perf@y.values[[1]])\nsens <- perf@y.values[[1]][ix] \nspec <- perf@x.values[[1]][ix]\nc(ix=ix, sens=sens, spec=spec)\nauc <- performance(prediction(gpred3, hn_p$pathscore), \"ppv\", \"npv\")\nauc\n\n\nsort(hn_p[hn_p$pathscore==1, ]$KepAv)\nsort(hn_p[hn_p$pathscore==3, ]$KepAv)\n# box-plot\n# par(mfrow=c(2,2), family='STKaiti')\npar(mfrow=c(1,2))\nboxplot(SUVav ~ pathscore, data=hn_p, main = \"SUVMean\", names=c(\"Moderate-Poorly\", \"Well\"))\nboxplot(ADCav ~ pathscore, data=hn_p, main = \"ADCMean\",  names=c(\"Moderate-Poorly\", \"Well\"))\npar(mfrow=c(1,2))\nboxplot(KepAv ~ pathscore, data=hn_p, main = \"KepMean\", names=c(\"Moderate-Poorly\", \"Well\"))\nboxplot(KtransAv ~ pathscore, data=hn_p, main = \"KtransMean\", names=c(\"Moderate-Poorly\", \"Well\"))\npar(mfrow=c(1,2))\nboxplot(VeAv ~ pathscore, data=hn_p, main = \"VeMean\", names=c(\"Moderate-Poorly\", \"Well\"))\nboxplot(IAUGCAv ~ pathscore, data=hn_p, main = \"IAUGCMean\", names=c(\"Moderate-Poorly\", \"Well\"))\n\n",
    "created" : 1519269509322.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2664554063",
    "id" : "E29541CC",
    "lastKnownWriteTime" : 1522662296,
    "last_content_update" : 1522662296024,
    "path" : "~/Code/md_thesis/clin_neu_med_2017_cn.R",
    "project_path" : "clin_neu_med_2017_cn.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}