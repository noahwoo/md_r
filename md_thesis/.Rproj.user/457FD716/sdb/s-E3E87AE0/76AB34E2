{
    "collab_server" : "",
    "contents" : "require(xlsx)\nrequire(ROCR)\nlibrary(pROC)\nlibrary(car)\nlibrary(psych)\n\n# boxplot with ggplot2\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(nortest)\n\nroc_suite <- function(target, pred) {\n  roc   <- prediction(pred, target)\n  auc   <- performance(roc, \"auc\")@y.values[[1]]\n  perf  <- performance(roc, \"sens\", \"spec\")\n  perfv <- perf@x.values[[1]] + perf@y.values[[1]]\n  ix    <- which.max(perfv)\n  cutoff <- perf@alpha.values[[1]][ix]\n  sens  <- perf@y.values[[1]][ix] \n  spec  <- perf@x.values[[1]][ix]\n  \n  nppv  <- performance(roc, \"ppv\", \"npv\")\n  npv   <- nppv@x.values[[1]][ix]\n  ppv   <- nppv@y.values[[1]][ix]\n  \n  r0 <- roc(target, rep(0, length(target)))\n  r1 <- roc(target, pred, direction=\"<\", smooth = FALSE)\n  test <- roc.test(r0, r1) # significant test\n  ci   <- ci.auc(r1, method = c(\"bootstrap\"))\n  list(auc=auc, ix=ix, sens=sens, spec=spec, \n       npv=npv, ppv=ppv, youden=sens+spec-1, \n       cutoff=cutoff, pvalue=test$p.value,\n       ci_lb=ci[1][[1]], ci_ub=ci[3][[1]], \n       ptar=as.factor(pred>cutoff))\n}\n\nhn_raw <- read.xlsx(\"/Users/wujianmin/Documents/personal/lp/0916-HN/HN0917_V5_1125.xlsx\", \n                    sheetName = \"HN2-retest2\")\nnames(hn_raw)\n\n# cleaning stuff\ncols <- c(\"pathscore\", \"ADCav\", \"KtransAv\", \"SUVav\", \n          \"ADCmin\", \"SUVmax\", \"VeAv\", \"KepAv\", \"IAUGCAv\")\ncols2 <- c(\"pathscore\", \"ADCmean\", \"Ktrans\", \"SUVmean\", \n          \"ADCmin\", \"SUVmax\", \"Ve\", \"Kep\", \"IAUGCmean\")\nhn_c <- hn_raw[, cols] # project column\n\n# factorize target variables\n# hn_c$pathscore[hn_c$pathscore==1] <- 0\n# hn_c$pathscore[hn_c$pathscore==2] <- 1\nhn_c$pathscore <- as.factor(hn_c$pathscore)\nhn_c <- hn_c[!is.na(hn_c$pathscore), ]\n\nsummary(hn_c$pathscore)\n# clear problematic case\n# hn_c <- hn_c[-13, ] # remove Wang Zhengyang\n# hn_c <- hn_c[-19, ] # remove Xiang Xiaoyi\n# hn_c <- hn_c[-23, ] # remove An Zhanzu\n# hn_c <- hn_c[c(1:8, 10:12, 14, 16:18, 20:22, 24), ] # remove ALL\nhn_c <- hn_c[c(1:12, 14:18, 20:22, 24), ] # remove ALL\n\nchisq.test(c(0, 0), p = c(9/23, 14/23))\nchisq.test(c(3, 1), p = c(9/23, 14/23))\nchisq.test(c(2, 5), p = c(9/23, 14/23))\nchisq.test(c(4, 8), p = c(9/23, 14/23))\n\n\n# mark the current state of processing\nhn <- hn_c\nsummary(hn)\n# visual check data distribution\nattach(hn)\npar(mfrow=c(2,1))\nplot(SUVav, ADCav, col=c(\"red\", \"green\", \"blue\")[pathscore], main=\"SUVav vs. ADCav\")\ntext(SUVav, ADCav, labels = row.names(hn), cex = 0.8)\n\nplot(KtransAv, ADCav, col=c(\"red\", \"green\", \"blue\")[pathscore], main=\"KtransAv vs. ADCav\")\ntext(KtransAv, ADCav, labels = row.names(hn), cex = 0.8)\ndetach(hn)\n\n# chisq test for t-stage and XSSC\nM <- as.table(rbind(c(3,2,4), c(1,5,8)))\ndimnames(M) <- list(ssc=c(\"W\", \"P\"), ts=c(\"t2\", \"t3\", \"t4\"))\nM\nchisq.test(M)\n\nM <- as.table(rbind(c(6,4), c(9,14)))\nchisq.test(M)\n\nM <- as.table(rbind(c(1,4), c(9,14)))\nchisq.test(M)\n\nM <- as.table(rbind(c(1,2), c(9,14)))\nchisq.test(M)\n\nM <- as.table(rbind(c(0,3), c(9,14)))\nchisq.test(M)\n\nM <- as.table(rbind(c(1,0), c(9,14)))\nchisq.test(M)\n\nM <- as.table(rbind(c(0,1), c(9,14)))\nchisq.test(M)\n\n# purify the columns and rows\nhn_p <- hn[, cols]\nhn_p <- hn_p[!is.na(hn_p$pathscore), ]\n\n# some stats here\nhn_d <- hn_p[!is.na(hn_p$ADCav), ]\nmean(hn_d[hn_d$pathscore==1, ]$ADCav)\nmean(hn_d[hn_d$pathscore==2, ]$ADCav)\n\nhn_d <- hn_p[!is.na(hn_p$SUVmax), ]\nmean(hn_d[hn_d$pathscore==1, ]$SUVmax)\nmean(hn_d[hn_d$pathscore==2, ]$SUVmax)\n\nhn_d <- hn_p[!is.na(hn_p$SUVav), ]\nmean(hn_d[hn_d$pathscore==1, ]$SUVav)\nmean(hn_d[hn_d$pathscore==2, ]$SUVav)\n\nhn_d <- hn_p[!is.na(hn_p$KtransAv), ]\nmean(hn_d[hn_d$pathscore==1, ]$KtransAv)\nmean(hn_d[hn_d$pathscore==2, ]$KtransAv)\n\nhn_d <- hn_p[!is.na(hn_p$KepAv), ]\nmean(hn_d[hn_d$pathscore==1, ]$KepAv)\nmean(hn_d[hn_d$pathscore==2, ]$KepAv)\n\nhn_d <- hn_p[!is.na(hn_p$VeAv), ]\nmean(hn_d[hn_d$pathscore==1, ]$VeAv)\nmean(hn_d[hn_d$pathscore==2, ]$VeAv)\n\nhn_d <- hn_p[!is.na(hn_p$IAUGCAv), ]\nmean(hn_d[hn_d$pathscore==1, ]$IAUGCAv)\nmean(hn_d[hn_d$pathscore==2, ]$IAUGCAv)\n\n# do anova test here\n# hn_p <- hn_p[hn_p$pathscore != 2, ]\nt.test(SUVav ~ pathscore, data=hn_p)\n# fit <- aov(SUVav ~ pathscore, data=hn_p) # OK\n# summary(fit)\n# kruskal.test(SUVav ~ pathscore, data = hn_p)\n\nt.test(SUVmax ~ pathscore, data=hn_p)\n# fit <- aov(SUVmax ~ pathscore, data=hn_p) # OK\n# summary(fit)\n# kruskal.test(SUVmax ~ pathscore, data = hn_p)\n\nt.test(ADCav ~ pathscore, data=hn_p)\n# fit <- aov(ADCav ~ pathscore, data=hn_p) # OK\n# summary(fit)\n# kruskal.test(ADCav ~ pathscore, data = hn_p)\n\nt.test(KtransAv ~ pathscore, data=hn_p)\n# fit <- aov(KtransAv ~ pathscore, data=hn_p) # OK\n# summary(fit)\n# kruskal.test(KtransAv ~ pathscore, data = hn_p)\n \nt.test(VeAv ~ pathscore, data=hn_p)\n# fit <- aov(VeAv ~ pathscore, data=hn_p) # OK\n# summary(fit)\n# kruskal.test(VeAv ~ pathscore, data = hn_p)\n\nt.test(KepAv ~ pathscore, data=hn_p)\n# fit <- aov(KepAv ~ pathscore, data=hn_p) # OK\n# summary(fit)\n# kruskal.test(KepAv ~ pathscore, data = hn_p)\n\nt.test(IAUGCAv ~ pathscore, data=hn_p)\n# fit <- aov(IAUGCAv ~ pathscore, data=hn_p) # OK\n# summary(fit)\n# kruskal.test(IAUGCAv ~ pathscore, data = hn_p)\n\n# box-plot with ggplot\nlibrary(reshape2)\nlibrary(ggplot2)\nhn_c <- hn_p\nnames(hn_c) <- cols2\nhn_c$pathscore <- c(\"WSCC\", \"M-PSCC\")[hn_c$pathscore] \nhn.m <- melt(hn_c, id.vars='pathscore', \n             measure.vars=c('SUVmean','ADCmean','Ktrans',\n                            'SUVmax','Ve','Kep'))\n# ggplot(hn.m) +\n#   geom_boxplot(aes(x=pathscore, y=value, color=variable))\np <- ggplot(data = hn.m, aes(x=variable, y=value)) + \n  geom_boxplot(aes(fill=pathscore))\np <- p + facet_wrap( ~ variable, scales=\"free\")\np <- p + scale_fill_manual(\n  values = c(\"blue\", \"red\"),\n  name = \"肿瘤分化程度\",\n  labels = c(\"WSCC\", \"M-PSCC\")) \np <- p + theme(text = element_text(family = 'SimSun'))\np\n\n# remove some rows\n# hn_p <- hn_p[!is.na(hn_p$ADCav), ]\n# hn_p <- hn_p[!is.na(hn_p$KepAv), ]\n\nsummary(hn_p)\n\n# correlation check\ncor(hn_p[, cols[c(-1, -9, -5)]], method=c(\"pearson\"))\ncor(hn_p[, cols[c(-1, -9, -5)]], method=c(\"spearman\"))\n\ncor.test( ~ ADCav + SUVav, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ ADCav + SUVmax, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ ADCav + KtransAv, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ ADCav + VeAv, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ ADCav + KepAv, data = hn_p, method = c(\"spearm\"))\n\ncor.test( ~ SUVav + SUVmax, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ SUVav + KtransAv, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ SUVav + VeAv, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ SUVav + KepAv, data = hn_p, method = c(\"spearm\"))\n\ncor.test( ~ SUVmax + KtransAv, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ SUVmax + VeAv, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ SUVmax + KepAv, data = hn_p, method = c(\"spearm\"))\n\ncor.test( ~ KtransAv + VeAv, data = hn_p, method = c(\"spearm\"))\ncor.test( ~ KtransAv + KepAv, data = hn_p, method = c(\"spearm\"))\n\ncor.test( ~ VeAv + KepAv, data = hn_p, method = c(\"spearm\"))\n\n# sig. test\nt.test(SUVav ~ pathscore, data=hn_p)\nwilcox.test(SUVav ~ pathscore, data=hn_p)\n\nt.test(ADCmin ~ pathscore, data=hn_p)\nwilcox.test(ADCmin ~ pathscore, data=hn_p)\n\nt.test(ADCav ~ pathscore, data=hn_p)\nwilcox.test(ADCav ~ pathscore, data=hn_p)\n\nt.test(KtransAv ~ pathscore, data=hn_p)\nwilcox.test(KtransAv ~ pathscore, data=hn_p)\n\nt.test(VeAv ~ pathscore, data=hn_p)\nwilcox.test(VeAv ~ pathscore, data=hn_p)\n\nt.test(KepAv ~ pathscore, data=hn_p)\nwilcox.test(KepAv ~ pathscore, data=hn_p)\n\nt.test(IAUGCAv ~ pathscore, data=hn_p)\nwilcox.test(IAUGCAv ~ pathscore, data=hn_p)\n\n# evaluate on train\n# cols <- c(\"pathscore\", \"ADCav\", \"KtransAv\", \"SUVav\", \n#           \"ADCmin\", \"SUVmax\", \"VeAv\", \"KepAv\", \"IAUGCAv\")\n\nhn_p <- hn_p[!is.na(hn_p$ADCav), ]\nhn_p <- hn_p[!is.na(hn_p$KtransAv), ]\nhn_p[\"9\", \"pathscore\"] <- 1\nhn_p$pathscore0 <- hn_p$pathscore==2\n\n\nfit <- glm(pathscore0 ~ SUVmax + SUVav + ADCav + VeAv + KtransAv + KepAv, \n           family=binomial(link = \"logit\"), hn_p)\nsummary(fit)\nstep(fit)\npred <- predict(fit, hn_p)\n\nfit0 <- glm(pathscore0 ~ SUVav + KepAv, \n           family=binomial(link = \"logit\"), hn_p)\nsummary(fit0)\npred0 <- predict(fit0, hn_p)\n\npar(mfrow=c(1,1))\n# SUVmean\nplot(roc(hn_p$pathscore0, -hn_p$SUVav, direction=\"<\", smooth = FALSE),\n     col=\"blue\",  main=\"\", tck = 0.02, lwd=1,\n     xaxs = \"i\", yaxs=\"i\", \n     xlim = c(1, 0), ylim = c(0,1), \n     xlab = \"1-特异度(1-Specifity)\", ylab = \"敏感度(Sensitivity)\",\n     family='STKaiti', legacy.axes = TRUE)\nsuv <- roc_suite(hn_p$pathscore, -hn_p$SUVav)\n\n# ADCmean\nlines(roc(hn_p$pathscore, hn_p$ADCav, direction=\"<\", smooth = FALSE),\n      col=\"red\", lwd=1)\nadc <- roc_suite(hn_p$pathscore, hn_p$ADCav)\n\n# SUVmax\nlines(roc(hn_p$pathscore, -hn_p$SUVmax, direction=\"<\", smooth = FALSE),\n      col=\"green\", lwd=1)\nsuvm <- roc_suite(hn_p$pathscore, -hn_p$SUVmax)\n\n# VeAv\nlines(roc(hn_p$pathscore, hn_p$VeAv, direction=\"<\", smooth = FALSE),\n      col=\"purple\", lwd=1)\nve <- roc_suite(hn_p$pathscore, hn_p$VeAv)\n\n# KepAv\nlines(roc(hn_p$pathscore, -hn_p$KepAv, direction=\"<\", smooth = FALSE),\n      col=\"darkcyan\", lwd=1)\nkep <- roc_suite(hn_p$pathscore, -hn_p$KepAv)\n\n# KtransAv\nlines(roc(hn_p$pathscore, hn_p$KtransAv, direction=\"<\", smooth = FALSE),\n      col=\"indianred4\", lwd=1)\ntrans <- roc_suite(hn_p$pathscore, hn_p$KtransAv)\n\n# 组合\nlines(roc(hn_p$pathscore, pred0, direction=\"<\", smooth = FALSE),\n      col=\"black\", lwd=1)\ncomb <- roc_suite(hn_p$pathscore, pred0)\n\nlegend(\"bottomright\", legend = c(\"SUVmean\", \"ADCmean\", \"SUVmax\",\n                                 \"Ve\", \"Kep\", \"Ktrans\", \"组合\"),\n       lty = 1,  bty = \"n\", col=c(\"blue\", \"red\", \"green\", \"purple\", \n                                  \"darkcyan\", \"indianred4\", \"black\"))\n\n\n# evaluate with cross validation(LOO)\nntrain <- dim(hn_p)[1]\ngpred1 <- (1:ntrain)\ngpred2 <- (1:ntrain)\ngpred3 <- (1:ntrain)\ngpred4 <- (1:ntrain)\ngpred5 <- (1:ntrain)\ngpred6 <- (1:ntrain)\ngpred7 <- (1:ntrain)\n\nhn_p[\"17\", \"SUVav\"] <- 6.09\nfor(k in 1:ntrain) {\n  hn_trn <- hn_p[-k, ]\n  hn_tst <- hn_p[k, ]\n  fit1 <- glm(pathscore ~ SUVav, family=binomial(link = \"logit\"), hn_trn)\n  fit2 <- glm(pathscore ~ ADCav, family=binomial(link = \"logit\"), hn_trn)\n  fit3 <- glm(pathscore ~ KepAv, family=binomial(link = \"logit\"), hn_trn)\n  fit4 <- glm(pathscore ~ KtransAv, family=binomial(link = \"logit\"), hn_trn)\n  fit5 <- glm(pathscore ~ SUVmax, family=binomial(link = \"logit\"), hn_trn)\n  fit6 <- glm(pathscore ~ VeAv, family=binomial(link = \"logit\"), hn_trn)\n  fit7 <- glm(pathscore ~ KtransAv + SUVav + ADCav + KepAv, \n              family=binomial(link = \"logit\"), hn_trn)\n  # fit5 <- rpart(pathscore ~ SUVav + ADCav + KepAv, data=hn_trn, method=\"anova\", \n  #             control=rpart.control(minsplit=2, cp=0.001))\n  pred <- predict(fit1, newdata = hn_tst, type=c(\"response\"))\n  gpred1[k] <- pred[1]\n  pred <- predict(fit2, newdata = hn_tst, type=c(\"response\"))\n  gpred2[k] <- pred[1]\n  pred <- predict(fit3, newdata = hn_tst, type=c(\"response\"))\n  gpred3[k] <- pred[1]\n  pred <- predict(fit4, newdata = hn_tst, type=c(\"response\"))\n  gpred4[k] <- pred[1]\n  pred <- predict(fit5, newdata = hn_tst, type=c(\"response\"))\n  gpred5[k] <- pred[1]\n  pred <- predict(fit6, newdata = hn_tst, type=c(\"response\"))\n  gpred6[k] <- pred[1]\n  pred <- predict(fit7, newdata = hn_tst, type=c(\"response\"))\n  gpred7[k] <- pred[1]\n}\n\nlibrary(car)\nfit5 <- glm(pathscore ~ SUVav + ADCav + KepAv, \n            family=binomial(link = \"logit\"), hn_p)\nvif(fit5)\nsummary(fit5)\n\n# table(gpred, hn_p$pathscore)\nhn_p$pred <- gpred4\n\n# we evaluate it here\nrequire(ROCR)\nlibrary(pROC)\npar(mfrow=c(1,1))\n\n# roc plot\n# perf <- performance(prediction(gpred, hn_p$pathscore), \"tpr\", \"fpr\")\n# plot(perf, avg=\"threshold\")\n# suv\nplot(roc(hn_p$pathscore, gpred1, direction=\"<\", smooth = FALSE),\n     col=\"blue\",  main=\"\", tck = 0.02, lwd=1,\n     xaxs = \"i\", yaxs=\"i\", \n     xlim = c(1, 0), ylim = c(0,1), \n     xlab = \"1-特异度(1-Specifity)\", ylab = \"敏感度(Sensitivity)\",\n     family='STKaiti', legacy.axes = TRUE)\nsuv <- roc_suite(hn_p$pathscore, gpred1)\n\n# adc\nlines(roc(hn_p$pathscore, gpred2, direction=\"<\", smooth = FALSE),\n      col=\"red\", lwd=1)\nadc <- roc_suite(hn_p$pathscore, gpred2)\n\n# kep\nlines(roc(hn_p$pathscore, gpred3, direction=\"<\", smooth = FALSE),\n      col=\"green\", lwd=1)\nkep <- roc_suite(hn_p$pathscore, gpred3)\n\n# ktrans\nlines(roc(hn_p$pathscore, -gpred4, direction=\"<\", smooth = FALSE),\n      col=\"purple\", lwd=1)\ntrans <- roc_suite(hn_p$pathscore, -gpred4)\n\n# suvm\nlines(roc(hn_p$pathscore, -gpred5, direction=\"<\", smooth = FALSE),\n      col=\"darkcyan\", lwd=1)\nsuvm <- roc_suite(hn_p$pathscore, -gpred5)\n\n# ve\nlines(roc(hn_p$pathscore, -gpred6, direction=\"<\", smooth = FALSE),\n      col=\"indianred4\", lwd=1)\nve <- roc_suite(hn_p$pathscore, -gpred6)\n\n# combined\nlines(roc(hn_p$pathscore, gpred7, direction=\"<\", smooth = FALSE),\n      col=\"black\", lwd=1)\ncomb <- roc_suite(hn_p$pathscore, gpred7)\n\nlegend(\"bottomright\", expression(\"SUVmean\",\"ADCmean\",\"Kep\",\n                                 \"Ktrans\", \"SUVmax\", \"Ve\", \"Combined\"), \n       lty = 1, col=c(\"blue\", \"red\", \"green\", \"purple\", \n                      \"darkcyan\", \"indianred4\", \"black\"))\n\n################################\nsort(hn_p[hn_p$pathscore==1, ]$KepAv)\nsort(hn_p[hn_p$pathscore==3, ]$KepAv)\n# box-plot\n# par(mfrow=c(2,2), family='STKaiti')\npar(mfrow=c(1,2))\nboxplot(SUVav ~ pathscore, data=hn_p, main = \"SUVMean\", names=c(\"Moderate-Poorly\", \"Well\"))\nboxplot(ADCav ~ pathscore, data=hn_p, main = \"ADCMean\",  names=c(\"Moderate-Poorly\", \"Well\"))\npar(mfrow=c(1,2))\nboxplot(KepAv ~ pathscore, data=hn_p, main = \"KepMean\", names=c(\"Moderate-Poorly\", \"Well\"))\nboxplot(KtransAv ~ pathscore, data=hn_p, main = \"KtransMean\", names=c(\"Moderate-Poorly\", \"Well\"))\npar(mfrow=c(1,2))\nboxplot(VeAv ~ pathscore, data=hn_p, main = \"VeMean\", names=c(\"Moderate-Poorly\", \"Well\"))\nboxplot(IAUGCAv ~ pathscore, data=hn_p, main = \"IAUGCMean\", names=c(\"Moderate-Poorly\", \"Well\"))\n",
    "created" : 1523075981232.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3992048928",
    "id" : "76AB34E2",
    "lastKnownWriteTime" : 1523202619,
    "last_content_update" : 1523202619135,
    "path" : "~/Code/md_thesis/clin_neu_med_2017.R",
    "project_path" : "clin_neu_med_2017.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}